iris[, iris$Sepal.Length]
iris[, iris$4]
iris[, 4]
iris[, 5]
iris[ which( iris$Species == "virginica" ) ]
iris[ which( iris$Species == "virginica" ), ]
iris[ which( iris$Species == "virginica" ), 1 ]
iris[ which( iris$Species == "virginica" ), iris$Sepal.Length ]
iris[ which( iris$Species == "virginica" ), iris$Sepal.Length ]
iris[ which( iris$Species == "virginica" ), 1 ]
sepalLength <- iris[ which( iris$Species == "virginica" ), 1 ]
mean( sepalLength )
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
summary( mtcars )
tapply(mtcars$hp, mtcars$cyl, mean)
hpAndCyl <- tapply(mtcars$hp, mtcars$cyl, mean)
hpAndCyl
hpAndCyl$8 - hpAndCyl$4
hpAndCyl[ 3 ] - hpAndCyl[ 1 ]
hpAndCyl[ 3 ]
hpAndCyl[ 2, 3 ]
hpAndCyl[ 3, 2 ]
summary( hpAndCyl )
nrow( hpAndCyl )
209.21429 - 82.63636
library(datasets)
data(mtcars)
hpAndCyl <- tapply(mtcars$hp, mtcars$cyl, mean)
class( hpAndCyl )
dim( hpAndCyl )
tapply(mtcars$hp, mtcars$cyl, mean)
class( mtcar )
class( mtcars )
dim( mtcars )
nrow( hpAndCyl )
ncol( hpAndCyl )
str( hpAndCly )
hpAndCyl <- tapply(mtcars$hp, mtcars$cyl, mean)
str( hpAndCly )
hpAndCyl <- tapply(mtcars$hp, mtcars$cyl, mean)
str( hpAndCly )
hpAndCyl
class( hpAndCyl )
str( mtcars )
str( ls )
set.seed( 20 )
x<-rnorm( 100 )
e<-rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary( y )
plot( x, y )
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
0
0
getwd()
setwd("~/Work/coursera/r-programming/rprog_data_ProgAssignment3-data")
getwd()
utcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(utcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head( outcome )
str( outcome )
View(outcome)
ncol( outcome )
nrow( outcome )
names( outcome )
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
source('~/Work/coursera/r-programming/best.R')
outcome <- read.csv( "outcome-of-care-measures.csv", colClasses = "character" )
class( outcome )
View(outcome)
View(outcome)
stateHospitals <- outcome[ which( outcome$State == state ), ]
state <- "TX"
stateHospitals <- outcome[ which( outcome$State == state ), ]
View(stateHospitals)
nrow( stateHospitals )
source('~/Work/coursera/r-programming/best.R')
best( "TX" )
best( "BB" )
source('~/Work/coursera/r-programming/best.R')
best( "BB" )
source('~/Work/coursera/r-programming/best.R')
best( "BB" )
best( "BB", "foo" )
best( "BB", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
best( "BB", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
source('~/Work/coursera/r-programming/best.R')
source('~/Work/coursera/r-programming/best.R')
best( "BB", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
best( "BB", "pneumonia" )
best( "BB", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
best( "BB", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
source('~/Work/coursera/r-programming/best.R')
source('~/Work/coursera/r-programming/best.R')
best( "BB", "pneumonia" )
best( "BB", "foo" )
source('~/Work/coursera/r-programming/best.R')
best( "BB", "foo" )
best( "BB", "pneumonia" )
best( "DC", "pneumonia" )
outcome <- read.csv( "outcome-of-care-measures.csv", colClasses = "character" )
state = "DC"
stateHospitals <- outcome[ which( outcome$State == state ), ]
view( stateHospitals )
View( stateHospitals )
View( stateHospitals )
View(stateHospitals)
stateSubset <- stateHospitals[ which( stateHospitals$11), ]
stateHospitals[ which( stateHospitals$), ]
names( stateHospitals )[ 11 ] <- "heart attack"
View(stateHospitals)
names( stateHospitals )[ "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure" ] <- "heart failure"
names( stateHospitals )[ stateHospitals$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure ] <- "heart failure"
names( stateHospitals )
names( stateHospitals )[ 17 ] <- "heart failure"
names( stateHospitals )
View(stateHospitals)
names( outcomes )
names( outcome )
names( stateHospitals )[ 17 ] <- "heart failure"
names( outcome )
source('~/Work/coursera/r-programming/best.R')
best( "DC", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
cleanStateHospitals <- stateHospitals[ , ]
stateHospitals
str( stateHospitals )
names( stateHospitals )[ 11 ] <- "heart attack"
names( stateHospitals )[ 17 ] <- "heart failure"
names( stateHospitals )[ 23 ] <- "pneumonia"
str( stateHospitals )
names( stateHospitals )
cleanStateHospitals <- stateHospitals[ , ]
class( stateHospitals )
class( stateHospitals$11 )
class( stateHospitals$pneumonia )
stateHospitals[, 11] <- as.numeric(stateHospitals[, 11])
class( stateHospitals$pneumonia )
source('~/Work/coursera/r-programming/best.R')
best( "DC", "pneumonia" )
stateHospitals[ , 11 ] <- as.numeric( stateHospitals[ , 11 ] )
stateHospitals[ , 17 ] <- as.numeric( stateHospitals[ , 17 ] )
stateHospitals[ , 23 ] <- as.numeric( stateHospitals[ , 23 ] )
View(stateHospitals)
cleanStateHospitals <- stateHospitals[ !is.na( stateHospitals[[ pollutant ]] ), pollutant ]
cleanStateHospitals <- stateHospitals[ !is.na( stateHospitals[[ columnName ]] ), columnName ]
columnName <- "pneumonia"
cleanStateHospitals <- stateHospitals[ !is.na( stateHospitals[[ columnName ]] ), columnName ]
View(stateHospitals)
View( cleanStateHospitals )
columnName <- "heart attack"
cleanStateHospitals <- stateHospitals[ !is.na( stateHospitals[[ columnName ]] ), columnName ]
View(stateHospitals)
min( cleanStateHospitals[ , 1 ] )
min( cleanStateHospitals )
columnName <- "heart failure"
min( cleanStateHospitals )
cleanStateHospitals <- stateHospitals[ !is.na( stateHospitals[[ columnName ]] ), columnName ]
min( cleanStateHospitals )
source('~/Work/coursera/r-programming/best.R')
best( "DC", "pneumonia" )
best( "DC", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
best( "DC", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
best( "DC", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
best( "DC", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
best( "DC", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
min( cleanStateHospitals )
hospitalsWithMinValue <- stateHospitals[ stateHospitals[[ outcome ]] == minValue ]
minValue <- min( cleanStateHospitals )
hospitalsWithMinValue <- stateHospitals[ stateHospitals[[ columnName ]] == minValue, ]
View(hospitalsWithMinValue)
cleanStateHospitals <- stateHospitals[ !is.na( stateHospitals[[ columnName ]] ), ]
View(cleanStateHospitals)
View(cleanStateHospitals)
cleanStateHospitals[[ outcome ]]
cleanStateHospitals[[ outcome ]]
min( cleanStateHospitals[ , outcome ] )
cleanStateHospitals[ , outcome ]
min( cleanStateHospitals[ , cleanStateHospitals[[ columnName ]] ] )
View(cleanStateHospitals)
cleanStateHospitals[ , cleanStateHospitals[[ columnName ]] ]
foo <- cleanStateHospitals[ , cleanStateHospitals[[ columnName ]] ]
View(foo)
foo <- stateHospitals[ !is.na( stateHospitals[[ columnName ]] ), columnName ]
min( stateHospitals[ !is.na( stateHospitals[[ columnName ]] ), columnName ] )
source('~/Work/coursera/r-programming/best.R')
best( "DC", "pneumonia" )
min( stateHospitals[ stateHospitals[[ columnName ]], columnName ] )
min( cleanStateHospitals[ cleanStateHospitals[[ columnName ]], columnName ] )
source('~/Work/coursera/r-programming/best.R')
best( "DC", "pneumonia" )
best( "DC", "heart failure" )
hospitalsWithMinValue <- cleanStateHospitals[ cleanStateHospitals[[ columnName ]] == minValue ]
View(hospitalsWithMinValue)
hospitalsWithMinValue <- cleanStateHospitals[ cleanStateHospitals[[ columnName ]] == minValue, ]
View(hospitalsWithMinValue)
View(hospitalsWithMinValue)
source('~/Work/coursera/r-programming/best.R')
hospitalsWithMinValue$Hospital.Name
best( "TX", "heart attack" )
source('~/Work/coursera/r-programming/best.R')
best( "TX", "heart attack" )
best( "TX", "heart failure" )
best( "MD", "heart attack" )
best( "MD", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
best( "MD", "pneumonia" )
source('~/Work/coursera/r-programming/best.R')
best( "MD", "pneumonia" )
best( "MD", "heart attack" )
best( "TX", "heart failure" )
best( "TX", "heart attack" )
source('~/Work/coursera/r-programming/best.R')
best( "TX", "heart attack" )
best( "DC", "heart attack" )
best( "VA", "heart attack" )
best( "PA", "heart attack" )
best( "NY", "heart attack" )
best( "OH", "heart attack" )
?order
hospitalsWithMinValue$Hospital.Name
View( stateHospitals )
hospitalsWithMinValue <- hospitalsWithMinValue[ order( Hospital.Name ), ]
hospitalsWithMinValue <- hospitalsWithMinValue[ order( hospitalsWithMinValue$Hospital.Name ), ]
View(stateHospitals)
View(stateHospitals)
stateHospitals <- stateHospitals[ order( stateHospitals$Hospital.Name ), ]
View(stateHospitals)
stateHospitals
stateHospitals$Hospital.Name
source('~/Work/coursera/r-programming/best.R')
best( "OH", "heart attack" )
source('~/Work/coursera/r-programming/best.R')
source('~/Work/coursera/r-programming/best.R')
source('~/Work/coursera/r-programming/best.R')
best( "DC", "heart attack" )
best( "TX", "heart attack" )
best( "TX", "heart failure" )
source('~/Work/coursera/r-programming/best.R')
best( "TX", "heart failure" )
best( "TX", "heart attack" )
best( "TX", "heart attac" )
best( "TTX", "heart attack" )
best( "MD", "heart attack" )
best( "MD", "pneumonia" )
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
setwd("~/Work/coursera/r-programming/rprog_data_ProgAssignment3-data")
setwd("~/Work/coursera/r-programming")
source('~/Work/coursera/r-programming/best.R')
submit()
submit()
submit()
source('~/Work/coursera/r-programming/best.R')
source('~/Work/coursera/r-programming/rankhospital.R')
rankhospital( "TX", "heart failure", 4)
source('~/Work/coursera/r-programming/rankhospital.R')
rankhospital( "TX", "heart failure", 4)
rankhospital( "MD", "heart attack", "worst" )
rankhospital( "MN", "heart attack", 5000 )
source('~/Work/coursera/r-programming/rankhospital.R')
rankhospital( "MN", "heart attack", 0 )
source('~/Work/coursera/r-programming/rankhospital.R')
rankhospital( "MN", "heart attack", 0 )
rankhospital( "MN", "heart attackssss", 1 )
rankhospital( "MXX", "heart attack", 1 )
source('~/Work/coursera/r-programming/rankhospital.R')
rankhospital( "MXX", "heart attack", 1 )
rankhospital( "MN", "heart attack", 0 )
source('~/Work/coursera/r-programming/rankhospital.R')
rankhospital( "MXX", "heart attack", 1 )
rankhospital( "MN", "heart attack", 0 )
rankhospital( "MN", "heart attack", 1 )
rankhospital( "MNN", "heart attack", 1 )
rankhospital( "MN", "heart attack", "best" )
rankhospital( "MN", "heart attack", "worst" )
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source('~/Work/coursera/r-programming/rankhospital.R')
source('~/Work/coursera/r-programming/rankall.R')
source('~/Work/coursera/r-programming/rankall.R')
source('~/Work/coursera/r-programming/rankall.R')
source('~/Work/coursera/r-programming/rankall.R')
source('~/Work/coursera/r-programming/rankall.R')
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
library( swirl )
library( swirl )
install_from_swirl("Getting and Cleaning Data")
swirl()
library( XML )
install.packages("XML", repos = "http://www.omegahat.org/R")
library( jsonlite )
View
?jsonlite
??jsonlite
swirl()
download.file()
getwd();
download.file( "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", curl )
capabilities("libcurl")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file( url, destfile = "data/communities.csv", method = "curl" )
rawCommunities <- read.csv( file = "data/communities.csv", header = TRUE, sep = "," )
summary( rawCommunities )
summary( rawCommunities[ 0, rawCommunities$VAL ] )
rawCommunities[ 0, rawCommunities$VAL ]
rawCommunities[ , rawCommunities$VAL ]
str( rawCommunities )
rawCommunities[ ,  ]
rawCommunities$VAL
rawCommunities$VAL == 24
summary( rawCommunities )
rawCommunities[ , which( rawCommunities$VAL == 24 ) ]
rawCommunities[ which( rawCommunities$VAL == 24 ), ]
millionAndUp <- rawCommunities[ which( rawCommunities$VAL == 24 ), ]
View(millionAndUp)
nrow( millionAndUp )
View(millionAndUp)
View(millionAndUp)
View(rawCommunities)
library( xlsx )
install.packages("xlsx")
library( xlsx )
rawNgap <- read.xlsx( "data/ngap.xlsx", sheetIndex = 1, header = TRUE )
colIndex <- 7:15
rowIndex <- 18:23
ngapSubset < read.xlsx( "data/ngap.xlsx", sheedIndex = 1, header = TRUE )
ngapSubset < read.xlsx( "data/ngap.xlsx", sheedIndex = 1, header = TRUE, colIndex=colIndex, rowIndex=rowIndex )
ngapSubset <- read.xlsx( "data/ngap.xlsx", sheedIndex = 1, header = TRUE, colIndex=colIndex, rowIndex=rowIndex )
ngapSubset <- read.xlsx( "data/ngap.xlsx", sheetIndex = 1, header = TRUE, colIndex=colIndex, rowIndex=rowIndex )
View(ngapSubset)
dat <- read.xlsx( "data/ngap.xlsx", sheetIndex = 1, header = TRUE, colIndex=colIndex, rowIndex=rowIndex )
View(ngapSubset)
sum(dat$Zip*dat$Ext,na.rm=T)
ngapSubset <- read.xlsx( "data/ngap.xlsx", sheetIndex = 1, header = TRUE, colIndex=colIndex, rowIndex=rowIndex )
sum(dat$Zip*dat$Ext,na.rm=T)
sum(dat$Zip*dat$Ext,na.rm=T)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file( url, destfile="data/restaurants.xml", method = "curl")
restaurants <- read.xlsx( "data/restaurant.xlsx", sheetIndex = 1, header = TRUE, colIndex=colIndex, rowIndex=rowIndex )
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse( url, useInternal=TRUE )
library( xml )
install.packages("XML", repos = "http://www.omegahat.org/R");
n
asdfas dfinstall.packages("XML", repos = "http://www.omegahat.org/R");sfasdfasdf
install.packages("XML",repos="http://www.omegahat.org/R",type="source")
install.packages("XML", repos = "http://www.omegahat.org/R")
install.packages("XML",repos="http://www.omegahat.org/R",type="source")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download( url, destfile = "data/idaho-microdata.csv" )
download.file( url, destfile = "data/idaho-microdata.csv" )
download.file( url, destfile = "data/idaho-microdata.csv" method = "curl" )
download.file( url, destfile = "data/idaho-microdata.csv", method = "curl" )
rawCommunities <- read.csv( file = "data/communities.csv", header = TRUE, sep = "," )
DT <- fread( "data/idaho-microdata.csv" )
library( data.table )
install.packages("data.table")
library( data.table )
DT <- fread( "data/idaho-microdata.csv" )
View(DT)
file.info("./data/idaho-microdata.csv")
file.info("./data/idaho-microdata.csv")$size
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1] rowMeans(DT)[DT$SEX==2])
system.time( DT[,mean(pwgtp15),by=SEX] )
system.time()
system.time( sapply(split(DT$pwgtp15,DT$SEX),mean) )
system.time( mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) )
system.time( ply(DT$pwgtp15,DT$SEX,mean) )
system.time( tapply(DT$pwgtp15,DT$SEX,mean) )
system.time( mean(DT$pwgtp15,by=DT$SEX) )
swirl()
library( swirl )
load("~/Work/coursera/exploratory-data-analysis/.RData")
library( swirl )
swirl()
source('~/Work/biometrics-r/round1.R')
source('~/Work/biometrics-r/round1.R')
getwd()
plotTestScores()
loadData( "output3.csv" )
plotTestScores()
source('~/Work/biometrics-r/round1.R')
plotTestScores()
View(rawData)
source('~/Work/biometrics-r/round1.R')
plotTestScores()
source('~/Work/biometrics-r/round1.R')
plotTestScores()
source('~/Work/biometrics-r/round1.R')
source('~/Work/biometrics-r/round1.R')
plotTestScores()
plotTestScores()
source('~/Work/biometrics-r/round1.R')
source('~/Work/biometrics-r/round1.R')
plotTestScores()
source('~/Work/biometrics-r/round1.R')
source('~/Work/biometrics-r/round1.R')
plotTestScores()
source('~/Work/biometrics-r/round1.R')
plotTestScores()
source('~/Work/biometrics-r/round1.R')
plotTestScores2()
source('~/Work/biometrics-r/round1.R')
plotTestScores2()
source('~/Work/biometrics-r/round1.R')
plotTestScores2()
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
source('~/Work/biometrics-r/round1.R')
plotTestScores2()
source('~/Work/biometrics-r/round1.R')
plotTestScores2()
source('~/Work/biometrics-r/round1.R')
plotTestScores2()
source('~/Work/biometrics-r/round1.R')
View(rawData)
View(rawData)
subset( rawData, speaker != "carolyn estel"
234` 4`
plotTestScores1()
View(rawData)
subset( rawData, speaker != "katrina houlahan" )
nrow( subset( rawData, speaker != "katrina houlahan" ) )
nrow( rawData )
source('~/Work/biometrics-r/round1.R')
source('~/Work/biometrics-r/round1.R')
source('~/Work/biometrics-r/round1.R')
source('~/Work/biometrics-r/round1.R')
source('~/Work/biometrics-r/round1.R')
plotTestScores3()
source('~/Work/biometrics-r/round1.R')
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
plotTestScores2()
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
source('~/Work/biometrics-r/round1.R')
source('~/Work/biometrics-r/round1.R')
plotTestScores1()
plotTestScores2()
plotTestScores3()
plotTestScores4()
plotTestScores4()sfasdf
source('~/Work/biometrics-r/round1.R')asF
output7-debugging-training-post.csv
source('~/Work/biometrics-r/round1.R')
loadData( "output7-debugging-training-post.csv" )
View(rawData)
plotAll()
plotAll( "output7-debugging-training-post.csv" )
plotAverageTestScores()
plotTestScores1()
plotTestScores2()
plotTestScores3()
plotTestScores4()
setwd("~/Work/biometrics-r")
